# -*- coding: utf-8 -*-
"""PyMilo Tree(from sklearn.tree._tree) object transporter."""
from sklearn.neighbors._kd_tree import KDTree
from sklearn.neighbors._ball_tree import BallTree

from .transporter import AbstractTransporter

type_to_tree = {
    "KDTree": KDTree,
    "BallTree": BallTree
}


class NeighborsTreeTransporter(AbstractTransporter):
    """Customized PyMilo Transporter developed to handle (pyi,pyx) NeighborsTreeTransporter object."""

    def serialize(self, data, key, model_type):
        """
        Serialize the special _tree field of the Neighbors model.

        :param data: the internal data dictionary of the given model
        :type data: dict
        :param key: the special key of the data param, which we're going to serialize its value(data[key])
        :type key: object
        :param model_type: the model type of the ML model
        :type model_type: str
        :return: pymilo serialized output of data[key]
        """
        if isinstance(data[key], KDTree):
            data[key] = {
                'pymilo-bypass': True,
                'pymilo-tree-type': "KDTree",
            }
        elif isinstance(data[key], BallTree):
            data[key] = {
                'pymilo-bypass': True,
                'pymilo-tree-type': "BallTree",
            }
        return data[key]

    def deserialize(self, data, key, model_type):
        """
        Deserialize the special _tree field of the Neighbors model.

        :param data: the internal data dictionary of the associated JSON file of the ML model generated by pymilo export.
        :type data: dict
        :param key: the special key of the data param, which we're going to deserialize its value(data[key])
        :type key: object
        :param model_type: the model type of the ML model
        :type model_type: str
        :return: pymilo deserialized output of data[key]
        """
        content = data[key]
        if (key == "_tree" and content is not None and
            (model_type == "KNeighborsRegressor" or
             model_type == "KNeighborsClassifier" or
             model_type == "RadiusNeighborsRegressor" or
             model_type == "RadiusNeighborsClassifier" or
             model_type == "NearestNeighbors" or
             model_type == "NearestCentroid"
             )):
            _tree = type_to_tree[content["pymilo-tree-type"]](
                data["_fit_X"],
                data["leaf_size"],
                data["effective_metric_"],
                **data["effective_metric_params_"],
            )
            return _tree

        else:
            return content
