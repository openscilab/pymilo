# -*- coding: utf-8 -*-
"""PyMilo CFnode(from sklearn.cluster._birch) object transporter."""
from sklearn.cluster._birch import _CFNode

from .transporter import AbstractTransporter
from .general_data_structure_transporter import GeneralDataStructureTransporter


class CFNodeTransporter(AbstractTransporter):
    """Customized PyMilo Transporter developed to handle CFnode object."""

    def __init__(self):
        self.all_cfnodes = set()
        self.retrieved_cfnodes = {}

    def serialize(self, data, key, model_type):
        """
        Serialize data[key] if it is an instance of _CFNode.

        :param data: the internal data dictionary of the given model
        :type data: dict
        :param key: the special key of the data param, which we're going to serialize its value(data[key])
        :type key: object
        :param model_type: the model type of the ML model
        :type model_type: str
        :return: pymilo serialized output of data[key]
        """
        self.all_cfnodes = set()
        if isinstance(data[key], _CFNode):
            data[key] = self.serialize_cfnode(data[key], GeneralDataStructureTransporter())
        return data[key]

    def deserialize(self, data, key, model_type):
        """
        Deserialize data[key] if it is a pymilo serialized _CFNode object.

        :param data: the internal data dictionary of the associated JSON file of the ML model generated by pymilo export.
        :type data: dict
        :param key: the special key of the data param, which we're going to deserialize its value(data[key])
        :type key: object
        :param model_type: the model type of the ML model
        :type model_type: str
        :return: pymilo deserialized output of data[key]
        """
        self.retrieved_cfnodes = {}
        content = data[key]
        if isinstance(content, dict) and "pymilo_model_type" in content and content["pymilo_model_type"] == "_CFNode":
            return self.deserialize_cfnode(content, GeneralDataStructureTransporter())
        else:
            return content
        
    def serialize_cfnode(self, cfnode, gdst):
        """
        Serialize given _CFnode instance recursively.

        :param cfnode: given _CFnode object to get serialized
        :type cfnode: sklearn.cluster._birch._CFNode
        :param gdst: an instance of GeneralDataStructureTransporter class
        :type gdst: pymilo.transporters.general_data_structure_transporter.GeneralDataStructureTransporter
        :return: dict
        """
        data = cfnode.__dict__
        cfnode_id = self.get_cfnode_id(cfnode)
        data["pymilo_cfnode_id"] = cfnode_id 
        self.all_cfnodes.add(cfnode_id)
        for key, value in data.items():
            if(isinstance(value, _CFNode)):
                value_id = self.get_cfnode_id(value)
                if(value_id in self.all_cfnodes):
                    data[key] = {
                        "pymilo_model_type": "_CFNode",
                        "pymilo_cfnode_value": "PYMILO_CFNODE_RECURSION",
                        "pymilo_cfnode_id": value_id,
                    }
                else:
                    data[key] = {
                        "pymilo_model_type": "_CFNode",
                        "pymilo_cfnode_value": self.serialize_cfnode(value, gdst),
                        "pymilo_cfnode_id": value_id,
                    }
            elif(isinstance(value, list) and key == "subclusters_"):
                if len(value) > 0:
                    if isinstance(value[0], _CFSubcluster):
                        data[key] = {
                            "pymilo_model_type": "_CFSubcluster",
                            "pymilo_subclusters_value": [self.serialize_cfsubcluster(cf_subcluster, gdst) for cf_subcluster in value],
                        }
                else:
                    data[key] = gdst.serialize(data, key, str(_CFNode)) # TODO model name
            else:
                data[key] = gdst.serialize(data, key, str(_CFNode))     
        return data

    def deserialize_cfnode(self, cfnode_pymiloed_obj, gdst):
